// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: hive.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// HiveServiceClient is the client API for HiveService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HiveServiceClient interface {
	Connect(ctx context.Context, in *ConnectRequest, opts ...grpc.CallOption) (HiveService_ConnectClient, error)
	ForceDisconnect(ctx context.Context, in *DisconnectRequest, opts ...grpc.CallOption) (*DisconnectResponse, error)
	Redeem(ctx context.Context, in *RedeemRequest, opts ...grpc.CallOption) (*RedeemResponse, error)
	Online(ctx context.Context, in *OnlineRequest, opts ...grpc.CallOption) (*OnlineResponse, error)
}

type hiveServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewHiveServiceClient(cc grpc.ClientConnInterface) HiveServiceClient {
	return &hiveServiceClient{cc}
}

func (c *hiveServiceClient) Connect(ctx context.Context, in *ConnectRequest, opts ...grpc.CallOption) (HiveService_ConnectClient, error) {
	stream, err := c.cc.NewStream(ctx, &HiveService_ServiceDesc.Streams[0], "/HiveService/Connect", opts...)
	if err != nil {
		return nil, err
	}
	x := &hiveServiceConnectClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type HiveService_ConnectClient interface {
	Recv() (*ConnectionStatus, error)
	grpc.ClientStream
}

type hiveServiceConnectClient struct {
	grpc.ClientStream
}

func (x *hiveServiceConnectClient) Recv() (*ConnectionStatus, error) {
	m := new(ConnectionStatus)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *hiveServiceClient) ForceDisconnect(ctx context.Context, in *DisconnectRequest, opts ...grpc.CallOption) (*DisconnectResponse, error) {
	out := new(DisconnectResponse)
	err := c.cc.Invoke(ctx, "/HiveService/ForceDisconnect", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hiveServiceClient) Redeem(ctx context.Context, in *RedeemRequest, opts ...grpc.CallOption) (*RedeemResponse, error) {
	out := new(RedeemResponse)
	err := c.cc.Invoke(ctx, "/HiveService/Redeem", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hiveServiceClient) Online(ctx context.Context, in *OnlineRequest, opts ...grpc.CallOption) (*OnlineResponse, error) {
	out := new(OnlineResponse)
	err := c.cc.Invoke(ctx, "/HiveService/Online", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HiveServiceServer is the server API for HiveService service.
// All implementations must embed UnimplementedHiveServiceServer
// for forward compatibility
type HiveServiceServer interface {
	Connect(*ConnectRequest, HiveService_ConnectServer) error
	ForceDisconnect(context.Context, *DisconnectRequest) (*DisconnectResponse, error)
	Redeem(context.Context, *RedeemRequest) (*RedeemResponse, error)
	Online(context.Context, *OnlineRequest) (*OnlineResponse, error)
	mustEmbedUnimplementedHiveServiceServer()
}

// UnimplementedHiveServiceServer must be embedded to have forward compatible implementations.
type UnimplementedHiveServiceServer struct {
}

func (UnimplementedHiveServiceServer) Connect(*ConnectRequest, HiveService_ConnectServer) error {
	return status.Errorf(codes.Unimplemented, "method Connect not implemented")
}
func (UnimplementedHiveServiceServer) ForceDisconnect(context.Context, *DisconnectRequest) (*DisconnectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ForceDisconnect not implemented")
}
func (UnimplementedHiveServiceServer) Redeem(context.Context, *RedeemRequest) (*RedeemResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Redeem not implemented")
}
func (UnimplementedHiveServiceServer) Online(context.Context, *OnlineRequest) (*OnlineResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Online not implemented")
}
func (UnimplementedHiveServiceServer) mustEmbedUnimplementedHiveServiceServer() {}

// UnsafeHiveServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HiveServiceServer will
// result in compilation errors.
type UnsafeHiveServiceServer interface {
	mustEmbedUnimplementedHiveServiceServer()
}

func RegisterHiveServiceServer(s grpc.ServiceRegistrar, srv HiveServiceServer) {
	s.RegisterService(&HiveService_ServiceDesc, srv)
}

func _HiveService_Connect_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ConnectRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(HiveServiceServer).Connect(m, &hiveServiceConnectServer{stream})
}

type HiveService_ConnectServer interface {
	Send(*ConnectionStatus) error
	grpc.ServerStream
}

type hiveServiceConnectServer struct {
	grpc.ServerStream
}

func (x *hiveServiceConnectServer) Send(m *ConnectionStatus) error {
	return x.ServerStream.SendMsg(m)
}

func _HiveService_ForceDisconnect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DisconnectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HiveServiceServer).ForceDisconnect(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/HiveService/ForceDisconnect",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HiveServiceServer).ForceDisconnect(ctx, req.(*DisconnectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HiveService_Redeem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RedeemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HiveServiceServer).Redeem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/HiveService/Redeem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HiveServiceServer).Redeem(ctx, req.(*RedeemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HiveService_Online_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OnlineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HiveServiceServer).Online(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/HiveService/Online",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HiveServiceServer).Online(ctx, req.(*OnlineRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// HiveService_ServiceDesc is the grpc.ServiceDesc for HiveService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var HiveService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "HiveService",
	HandlerType: (*HiveServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ForceDisconnect",
			Handler:    _HiveService_ForceDisconnect_Handler,
		},
		{
			MethodName: "Redeem",
			Handler:    _HiveService_Redeem_Handler,
		},
		{
			MethodName: "Online",
			Handler:    _HiveService_Online_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Connect",
			Handler:       _HiveService_Connect_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "hive.proto",
}
